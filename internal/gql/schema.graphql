scalar Time
scalar UUID

input UserInfo {
  email: String!
  password: String!
}

input HeaderInput {
  id: UUID
  name: String!
  data: String!
}

input PageInput {
  id: UUID
  name: String!
  slug: String!
  data: String!
}

input FooterInput {
  id: UUID
  name: String!
  data: String!
}

type Role {
  id: UUID!
  name: String!
}

type User {
  id: UUID!
  name: String!
  email: String!
  created_at: Time!
  role: Role!
  website: Website!
}

type Website {
  id: UUID!
  name: String!
  theme: Theme!
  header: Header
  pages: [Page]!
  footer: Footer
}

type Theme {
  id: UUID!
  name: String!
}

type Header {
  id: UUID!
  name: String!
  data: String!
  created_at: Time!
  updated_at: Time!
}

type Page {
  id: UUID!
  name: String!
  slug: String!
  data: String!
  created_at: Time!
  updated_at: Time!
}

type Footer {
  id: UUID!
  name: String!
  data: String!
  created_at: Time!
  updated_at: Time!
}

type AuthToken {
  accessToken: String!
  refreshToken: String!
}

type Query {
  # Get UserID in backend by parsing access token in header["Authorization"]
  me: User!
  website: Website!
  header(websiteID: UUID!): Header
  page(websiteID: UUID!): [Page]!
  footer(websiteID: UUID!): Footer
}

type Mutation {
  login(userInfo: UserInfo!): AuthToken!
  logout: Boolean!
  refreshToken: String!

  createHeader(header: HeaderInput!): Header!
  deleteHeader(id: UUID!): Boolean!
  modifyHeader(header: HeaderInput!): Header!

  createPage(page: PageInput!): Page!
  deletePage(id: UUID!): Boolean!
  modifyPage(page: PageInput!): Page!

  createFooter(footer: FooterInput!): Footer!
  deleteFooter(id: UUID!): Boolean!
  modifyFooter(footer: FooterInput!): Footer!

  modifyWebsiteTheme(id: UUID!, themeID: UUID!): Website!
}
